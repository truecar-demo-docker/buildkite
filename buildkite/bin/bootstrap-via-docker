#!/usr/bin/env python3

# This is the `command` agent / global hook

import os
from os.path import basename
from pprint import pprint
import json

import docker
from docker.types import LogConfig


docker_client = docker.from_env()


def self_container_id():
    with open('/proc/self/cgroup', 'r') as f:
        for line in f.readlines():
            idx, labels, cgroup = line.strip().split(':', 3)
            if labels == 'name=systemd':
                return basename(cgroup)

    return None


def self_container():
    return docker_client.containers.get(self_container_id())


def cgroup_parent():
    return self_container().attrs.get('HostConfig', {}).get('CgroupParent')


def docker_image():
    image = os.environ.get('BUILDKITE_BOOTSTRAP_DOCKER_IMAGE',
                           self_container().attrs['Image'])  # default to this container's image
    try:
        return docker_client.images.get(image)
    except docker.errors.ImageNotFound:
        pass  # image doesn't exist locally, so attempt to pull

    parts = image.split(':', 2)
    repo = parts[0]
    if len(parts) == 2:
        tag = parts[1]
    else:
        tag = 'latest'

    print(f'--- Pulling bootstrap docker image {repo}:{tag} ...')
    return docker_client.images.pull(repo, tag)


def build_environment():
    def unescape_value(value):
        '''
        values in this file are encoded via Golang fmt.Sprintf('%q'), so they
        are wrapped with " and any " within are backslash-escaped
        '''
        return value.strip('"').replace('\\"', '"')

    # environment variables from os.environ to pass on to bootstrap container
    whitelist = [
        'AWS_CONTAINER_CREDENTIALS_RELATIVE_URI',
        'AWS_DEFAULT_REGION',
        'AWS_EXECUTION_ENV',
        'AWS_REGION',
        'BASH_ENV',
        'REGISTRY_HOST',
    ]

    # Copy all BUILDKITE_* vars
    env = {var: os.environ[var] for var in os.environ
           if var.startswith('BUILDKITE_')}

    # additional vars specified in the whitelist
    for var in whitelist:
        if var in os.environ:
            env[var] = os.environ[var]

    # job vars from the env file
    env_file = os.environ.get('BUILDKITE_ENV_FILE', None)
    if env_file:
        with open(env_file, 'r') as f:
            for line in f.readlines():
                var, value = line.strip().split('=', 2)
                value = unescape_value(value)
                env[var] = value
        # since the file isn't available to the bootstrap container, unset this var
        del env['BUILDKITE_ENV_FILE']

    return env


job_id = os.environ.get('BUILDKITE_JOB_ID', '')
job_label = os.environ.get('BUILDKITE_LABEL', '')
build_id = os.environ.get('BUILDKITE_BUILD_ID', '')
project_slug = os.environ.get('BUILDKITE_PROJECT_SLUG', '')
image = docker_image()

datadog_logs_config = {
    'buildkite.bootstrap.docker_image': image.id,
    'buildkite.build-id': build_id,
    'buildkite.job-id': job_id,
    'buildkite.label': job_label,
    'buildkite.project_slug': project_slug,
    'service': 'buildkite',
    'source': 'buildkite-agent',
}

volumes = {}

docker_run_args = {
    'image': image.id,
    'entrypoint': 'buildkite-agent',
    'command': ['bootstrap'],
    'name': f'buildkite-build-{build_id}-bootstrap-{job_id}',
    'labels': {
        'tc.buildkite.build_id': build_id,
        'tc.buildkite.job_id': job_id,
        'com.datadoghq.ad.logs': json.dumps(datadog_logs_config,
                                            indent=None, sort_keys=True, separators=(',', ':')),
    },
    'volumes_from': [self_container_id()],
    'volumes': volumes,
    'environment': build_environment(),
    'network_mode': f'container:{self_container_id()}',
    'log_config': LogConfig(
        type='local',
    ),
 }


if cgroup_parent():
    docker_run_args['cgroup_parent'] = cgroup_parent()


print('--- Creating Bootstrap container')

if os.environ.get('BUILDKITE_AGENT_DEBUG', False):
    print('Container config:')
    print(json.dumps(docker_run_args))

container = docker_client.containers.create(**docker_run_args)

if os.environ.get('BUILDKITE_AGENT_DEBUG', False):
    print(f'Bootstrap container created. name={container.name} id={container.id}')

print(f'+++ Starting Bootstrap')
os.execl('/usr/bin/docker', 'docker', 'start', '--attach', container.id)
